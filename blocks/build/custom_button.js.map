{"version":3,"file":"custom_button.js","mappingssources":["webpack://blocks/./src/custom-button.js"],"sourcesContent":["// /* eslint-disable react/jsx-props-no-spreading, react/prop-types */\n// import classnames from \"classnames\";\n\n// const { assign, merge } = lodash;\n\n// const { __ } = wp.i18n;\n// const { addFilter } = wp.hooks;\n// const { createHigherOrderComponent } = wp.compose;\n// const { Fragment } = wp.element;\n// const { InspectorControls } = wp.blockEditor;\n// const { PanelBody, SelectControl } = wp.components;\n\n// /**\n//  * Add Size attribute to Button block\n//  *\n//  * @param  {Object} settings Original block settings\n//  * @param  {string} name     Block name\n//  * @return {Object}          Filtered block settings\n//  */\n// function addAttributes(settings, name) {\n//   if (name === \"core/button\") {\n//     return assign({}, settings, {\n//       attributes: merge(settings.attributes, {\n//         size: {\n//           type: \"string\",\n//           default: \"\",\n//         },\n//       }),\n//     });\n//   }\n//   return settings;\n// }\n\n// addFilter(\n//   \"blocks.registerBlockType\",\n//   \"intro-to-filters/button-block/add-attributes\",\n//   addAttributes\n// );\n\n// /**\n//  * Add Size control to Button block\n//  */\n// const addInspectorControl = createHigherOrderComponent((BlockEdit) => {\n//   return (props) => {\n//     const {\n//       attributes: { size },\n//       setAttributes,\n//       name,\n//     } = props;\n\n//     if (name !== \"core/button\") {\n//       return <BlockEdit {...props} />;\n//     }\n\n//     return (\n//       <Fragment>\n//         <BlockEdit {...props} />\n//         <InspectorControls>\n//           <PanelBody\n//             title={__(\"Size settings\", \"intro-to-filters\")}\n//             initialOpen={false}\n//           >\n//             <SelectControl\n//               label={__(\"Size\", \"intro-to-filters\")}\n//               value={size}\n//               options={[\n//                 {\n//                   label: __(\"Regular\", \"intro-to-filters\"),\n//                   value: \"regular\",\n//                 },\n//                 {\n//                   label: __(\"Small\", \"intro-to-filters\"),\n//                   value: \"small\",\n//                 },\n//                 {\n//                   label: __(\"Large\", \"intro-to-filters\"),\n//                   value: \"large\",\n//                 },\n//               ]}\n//               onChange={(value) => {\n//                 setAttributes({ size: value });\n//               }}\n//             />\n//           </PanelBody>\n//         </InspectorControls>\n//       </Fragment>\n//     );\n//   };\n// }, \"withInspectorControl\");\n\n// addFilter(\n//   \"editor.BlockEdit\",\n//   \"intro-to-filters/button-block/add-inspector-controls\",\n//   addInspectorControl\n// );\n\n// /**\n//  * Add size class to the block in the editor\n//  */\n// const addSizeClassEditor = createHigherOrderComponent((BlockListBlock) => {\n//   return (props) => {\n//     const {\n//       attributes: { size },\n//       className,\n//       name,\n//     } = props;\n\n//     if (name !== \"core/button\") {\n//       return <BlockListBlock {...props} />;\n//     }\n\n//     return (\n//       <BlockListBlock\n//         {...props}\n//         className={classnames(className, size ? `has-size-${size}` : \"\")}\n//       />\n//     );\n//   };\n// }, \"withClientIdClassName\");\n\n// addFilter(\n//   \"editor.BlockListBlock\",\n//   \"intro-to-filters/button-block/add-editor-class\",\n//   addSizeClassEditor\n// );\n\n// /**\n//  * Add size class to the block on the front end\n//  *\n//  * @param  {Object} props      Additional props applied to save element.\n//  * @param  {Object} block      Block type.\n//  * @param  {Object} attributes Current block attributes.\n//  * @return {Object}            Filtered props applied to save element.\n//  */\n// function addSizeClassFrontEnd(props, block, attributes) {\n//   if (block.name !== \"core/button\") {\n//     return props;\n//   }\n\n//   const { className } = props;\n//   const { size } = attributes;\n\n//   return assign({}, props, {\n//     className: classnames(className, size ? `has-size-${size}` : \"\"),\n//   });\n// }\n\n// // Comment out to test the PHP approach defined in intro-to-block-filters.php\n// addFilter(\n//   \"blocks.getSaveContent.extraProps\",\n//   \"intro-to-filters/button-block/add-front-end-class\",\n//   addSizeClassFrontEnd\n// );\n"],"names":[],"sourceRoot":""}